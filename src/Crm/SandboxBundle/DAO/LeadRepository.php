<?php

namespace Crm\SandboxBundle\DAO;

use DoctrineExtensions\Query\Mysql\Day;
use Oro\ORM\Query\AST\Functions\SimpleFunction;

/**
 * LeadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeadRepository extends \Doctrine\ORM\EntityRepository
{
	public function getLeadsBySalesRepresentative($userId)
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT l
			from CrmSandboxBundle:lead l
			where (l.user = :userId or  l.assignedSalesRep = :userId)
			 and  l.isLead = 1	
			 and  l.closedStatus IS NULL
			 order by l.salesRepAssignDate DESC
			'
			)
			->setParameter('userId', $userId);
			return ($query->getResult());
	}
	public function getArchivedLeads()
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT l
			from CrmSandboxBundle:lead l
			where l.isLead = 0
			 or   l.isInterested = 0
			'
			);
			return ($query->getResult());
	}
	public function findLeadByAny($slug)
	{
		$slug = '%'.$slug.'%';

		$query = $this->getEntityManager()->createQuery(
			"SELECT l
			from CrmSandboxBundle:lead l
			join l.contact c
			where l.isLead = 1
			and (c.name like :name or c.mobile like :mobile or c.mobile2 like :mobile2 or c.email like :email )  
			"
			)
			->setParameter('mobile',$slug)
			->setParameter('mobile2',$slug)
			->setParameter('email',$slug)
			->setParameter('name',$slug);
			return ($query->getResult());
	}
	public function findLeadByAnyUser($slug,$user)
	{
		$slug = '%'.$slug.'%';

		$query = $this->getEntityManager()->createQuery(
			"SELECT l
			from CrmSandboxBundle:lead l
			join l.contact c
			where l.isLead = 1
			and  (l.owner = :userId or  l.assignedSalesRep = :userId)
			and (c.name like :name or c.mobile like :mobile or c.mobile2 like :mobile2 or c.email like :email )  
			"
			)
			->setParameter('mobile',$slug)
			->setParameter('mobile2',$slug)
			->setParameter('email',$slug)
			->setParameter('userId', $user->getId())
			->setParameter('name',$slug);
			return ($query->getResult());
	}
	

	public function getSalesRepresentativeLeads($userId)
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT l
			from CrmSandboxBundle:lead l
			where (l.user = :userId or  l.assignedSalesRep = :userId)
			'
			)
			->setParameter('userId', $userId);
			return ($query->getResult());
	}

	public function getLeadsToAssign()
	{
		// GEEHINT: Might need to filter no-potential leads.
		$query = $this->getEntityManager()->createQuery(
			'SELECT l
			 FROM CrmSandboxBundle:lead l
			 where l.assignedSalesRep IS NULL
			  and l.closedStatus is NULL
			 order by l.date DESC
			'
			);
		return ($query->getResult());
	}

	public function getCaseByOrigin($beginDate,$endDate)
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT  ch.type as channelName, l , sc , con , count(l.id) as leadCount
			from CrmSandboxBundle:lead l
			join l.contact con
			join l.subChannel sc
			join sc.channel ch 
			where l.date between :begin and :end
			group by ch
			'
			)
		->setParameter('begin', $beginDate, \Doctrine\DBAL\Types\Type::DATETIME)
		->setParameter('end', $endDate, \Doctrine\DBAL\Types\Type::DATETIME)
		;
		return ($query->getResult());
	}

	public function getLeadsByChannel($channel,$beginDate,$endDate)
	{
		$query = $this->getEntityManager()->createQuery(
			"SELECT  subCh,ch,l,count(l) as leadCount,subCh.name as subChannelName
			from CrmSandboxBundle:subChannel subCh
			join subCh.channel ch
			join subCh.leads l
			where ch.type = :channel
			and l.date between :begin and :end
			group by subCh.name
			"
			)
		->setParameter('channel', $channel)
		->setParameter('begin', $beginDate, \Doctrine\DBAL\Types\Type::DATETIME)
		->setParameter('end', $endDate, \Doctrine\DBAL\Types\Type::DATETIME)
		;
		return($query->getResult());	
	}
	public function getLeadsByDate($beginDate,$endDate)
	{
        $qb = $this->getEntityManager()->CreateQueryBuilder();
        $q  = $qb->select('count(l) as lead','DAY(l.date) AS day')
        ->from('CrmSandboxBundle:Lead', 'l')
        ->where(
           'l.date BETWEEN :begin AND :end'
           )
        ->groupBy('day')
        ->setParameter('begin', $beginDate, \Doctrine\DBAL\Types\Type::DATETIME)
        ->setParameter('end', $endDate, \Doctrine\DBAL\Types\Type::DATETIME)
        ->getQuery();

        return $q->getResult();

	}

	public function getWholeLeadsByDate($beginning, $ending, $id = 0, $type)
	{
		if($type){
			if ($id) {
				# GEEHINT: I think this should also include created by, not just assigned. The one at the bottom too.
				# ^ not really, when they create it, its automatically assigned to them.
				$query = $this->getEntityManager()->createQuery(
						"SELECT l
						FROM CrmSandboxBundle:Lead l
						WHERE (l.salesRepAssignDate BETWEEN :begining AND :ending)
						AND l.team = :team
						ORDER BY l.salesRepAssignDate DESC
						"
					)->setParameter(
						'begining', $beginning, \Doctrine\DBAL\Types\Type::DATETIME
					)->setParameter(
						'ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME
					)->setParameter(
						'team', $id
					)
					;
			}
			else {
				$query = $this->getEntityManager()->createQuery(
							"SELECT l
							FROM CrmSandboxBundle:Lead l
							WHERE (l.salesRepAssignDate BETWEEN :begining AND :ending)
							AND l.team IS NOT NULL
							ORDER BY l.salesRepAssignDate DESC
							"
						)->setParameter(
							'begining', $beginning, \Doctrine\DBAL\Types\Type::DATETIME
						)->setParameter(
							'ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME
						);
			}
		}
		else {
			$query = $this->getEntityManager()->createQuery(
				"SELECT l
				FROM CrmSandboxBundle:Lead l
				JOIN l.assignedSalesRep as u 
				WHERE (l.salesRepAssignDate BETWEEN :begining AND :ending)
				AND u = :user
				ORDER BY l.salesRepAssignDate DESC
				"
			)->setParameter(
				'begining', $beginning, \Doctrine\DBAL\Types\Type::DATETIME
			)->setParameter(
				'ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME
			)->setParameter(
				'user', $id
			)
			;
		}			

		return ($query->getResult());
	}

	public function getLeadNotifications($user)
	{
    	$query = $this->getEntityManager()->createQuery(
			'SELECT ln
			 FROM CrmNotificationBundle:LeadNotification ln
			 where ln.toUser = :user
			 and ln.seen = false
			 order by ln.created DESC
			'
			)
    	->setParameter('user', $user->getId());
		return ($query->getResult());
	}



}
