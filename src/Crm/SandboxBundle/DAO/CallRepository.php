<?php

namespace Crm\SandboxBundle\DAO;

use Crm\SandboxBundle\Entity\Call;
/**
 * CallRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CallRepository extends \Doctrine\ORM\EntityRepository
{
	public function getCallsBreakdown()
	{
		$query = $this->_em->createQueryBuilder()
		->select('u.roles','count(c.id) as callCount') 
		->from('CrmSandboxBundle:Call', 'c')
		->join('c.user','u')
		->where('c.isCall = true')
		->groupBy('u.roles')
		->getQuery();
		 $callBreakdown = $query->getResult();
		 return $callBreakdown;	
	}
	public function getWholeMeetingsByDate($beginning, $ending, $id, $type)
	{
		$query;
		if($type) {
			if ($id) {

				$query = $this->getEntityManager()->createQuery(
				   "SELECT c
					FROM CrmSandboxBundle:Call c
					JOIN c.user u
					WHERE c.date BETWEEN :beginning AND :ending
					AND c.isCall = false
					AND (u.team = :team)
					ORDER BY c.date DESC
				")
				->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('team', $id)
			;
			}
			else {
				$query = $this->getEntityManager()->createQuery(
					   "SELECT c
						FROM CrmSandboxBundle:Call c
						WHERE c.date BETWEEN :beginning AND :ending
						AND c.isCall = false
						ORDER BY c.date DESC
					")
					->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				;
			}
		}
		else {
			// Specific sales rep
			$query = $this->getEntityManager()->createQuery(
					   "SELECT c
						FROM CrmSandboxBundle:Call c
						WHERE c.date BETWEEN :beginning AND :ending
						AND c.isCall = false
						AND c.user = :user
						ORDER BY c.date DESC
					")
					->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('user', $id)
				;
		}

		return $query->getResult();
	}
	public function getWholeCallsByDate($beginning, $ending, $id, $type)
	{
		$query;
		if($type) {
			if($id){


				$query = $this->getEntityManager()->createQuery(
				   "SELECT c
					FROM CrmSandboxBundle:Call c
					JOIN c.user u
					WHERE c.date BETWEEN :beginning AND :ending
					AND c.isCall = true
					AND (u.team = :team)
					ORDER BY c.date DESC
				")
				->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('team', $id)
			;
			} 
			else {
				$query = $this->getEntityManager()->createQuery(
					   "SELECT c
						FROM CrmSandboxBundle:Call c
						WHERE (c.date BETWEEN :beginning AND :ending)
						AND c.isCall = true	
						AND c.user = :user
						ORDER BY c.date DESC
					")
					->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('user', $id)
				;
			}
		}
		else {
			//Specific sales rep
			$query = $this->getEntityManager()->createQuery(
				   "SELECT c
					FROM CrmSandboxBundle:Call c
					JOIN c.user u
					WHERE c.date BETWEEN :beginning AND :ending
					AND c.isCall = true
					AND (u = :user)
					ORDER BY c.date DESC
				")
				->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('user', $id)
			;
		}

		return $query->getResult();
	}
	public function getInboundVsOutboundByDate($beginning, $ending, $id = 0, $type = null)
	{
		// Perform operations according to type. 1: team, 0: sales representative
		// If team
		if($type){
			if ($id > 0) {
				$query = $this->getEntityManager()->createQuery(
				"SELECT count(c.orientation) AS amount, c.orientation,u.username as username 
				 FROM CrmSandboxBundle:Call c
				 JOIN c.user u
				 WHERE (c.date BETWEEN :beginning AND :ending)
				 AND c.team = :team
				 AND c.isCall = true
				 GROUP BY c.user, c.orientation
				")
				->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				->setParameter('team', $id)
				;
			}
			else {
				$query = $this->getEntityManager()->createQuery(
					"SELECT count(c.orientation) AS amount , c.orientation, t.name as username
					 FROM CrmSandboxBundle:Call c
					 JOIN c.team t
					 WHERE (c.date BETWEEN :beginning AND :ending)
					 AND c.isCall = true
					 group By  c.team, c.orientation
					")
					->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
					->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
				;
			}
		}
		// if sales rep
		else {
			$query = $this->getEntityManager()->createQuery(
			"SELECT count(c.orientation) AS amount, c.orientation,u.username as username 
			 FROM CrmSandboxBundle:Call c
			 JOIN c.user u
			 WHERE (c.date BETWEEN :beginning AND :ending)
			 AND c.user = :user
			 AND c.isCall = true
			 GROUP BY c.user, c.orientation
			")
			->setParameter('beginning', $beginning, \Doctrine\DBAL\Types\Type::DATETIME)
			->setParameter('ending', $ending, \Doctrine\DBAL\Types\Type::DATETIME)
			->setParameter('user', $id)
			;
		}
		$result = $query->getResult();
		// if ($team > 0) {
			$manipulatedResult = [];
			
			foreach ($result as $row)
					$manipulatedResult[$row['username']] [$row['orientation']] =  $row['amount'];	

			return $manipulatedResult;
		// }
		return $result;
	}	
}
