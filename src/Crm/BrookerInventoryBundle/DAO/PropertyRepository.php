<?php

namespace Crm\BrookerInventoryBundle\DAO;

/**
 * PropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends \Doctrine\ORM\EntityRepository
{

    public function getPropertiesByInterval($beginDate, $endDate)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$q = $qb->select('p')
    	->from('CrmBrookerInventoryBundle:Property', 'p')
    	->where(
    		'p.nextPayment between :beginDate AND :endDate'
    		)
    	->setParameter('beginDate', $beginDate)
    	->setParameter('endDate', $endDate)
    	->getQuery();

    	return $q->getResult();
    }

    public function getAvailableForDeal()
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT p
             FROM CrmBrookerInventoryBundle:Property p
             LEFT JOIN p.deal as d
             WHERE (p.isSold = false) AND (d IS NULL)');
        //(d.deposit = 0 OR d.deposit IS NULL OR d IS NULL)

        return $query->getResult();
    } 

    public function getDepositedAmount()
    {
        $query = $this->getEntityManager()->createQUery(
            'SELECT count(p) as amount
             FROM CrmBrookerInventoryBundle:Property p
             INNER JOIN p.deal as d
             WHERE (p.isSold = false) AND (d.deposit > 0)
            ');

        return $query->getResult();
    }
    public function getPropertiesByFilter($filter)
    {
        $q = 'SELECT p FROM CrmBrookerInventoryBundle:Property p WHERE p.featured = 1 ';
        if($filter['min_area'])
            $q = $q . 'AND (p.buildupArea BETWEEN :min_area AND :max_area) ';
        if($filter['min_landarea'])
            $q = $q . 'AND (p.landArea BETWEEN :min_landarea AND :max_landarea) ';
        if(isset($filter['location']))
            $q = $q . 'AND (p.location = :location) ';
        if(isset($filter['project']))
            $q = $q . 'AND (p.project = :project) ';
        if($filter['min_room'])
            $q = $q . 'AND (p.bedrooms BETWEEN :min_room AND :max_room) ';
        if($filter['contract_type'])
            $q = $q . 'AND (p.sellingType = :contract_type) ';
        if(isset($filter['property_type']))
            $q = $q . 'AND (p.propertyType = :property_type)';
        $query = $this->getEntityManager()->createQuery($q);

        if($filter['min_area'])
            $query->setParameter('min_area', $filter['min_area'])->setParameter('max_area', $filter['max_area']);
        if($filter['min_landarea'])
            $query->setParameter('min_landarea', $filter['min_landarea'])->setParameter('max_landarea', $filter['max_landarea']);
        if(isset($filter['location']))
            $query->setParameter('location', $filter['location']);
        if($filter['min_room'])
            $query->setParameter('min_room', $filter['min_room'])->setParameter('max_room', $filter['max_room']);
        if($filter['contract_type'])
            $query->setParameter('contract_type', $filter['contract_type']);
        if(isset($filter['property_type']))
            $query->setParameter('property_type', $filter['property_type']);
        if(isset($filter['project']))
            $query->setParameter('project', $filter['project']);
    
        return $query->getResult();
    }
}
